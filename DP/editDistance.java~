/*
 * 
 * Edit distance between two strings

Given two strings str1 and str2 and below operations that can performed on str1. Find minimum number of edits (operations) required to convert ‘str1′ into ‘str2′.

Insert
Remove
Replace
All of the above operations are of equal cost.
 * 
 * @author Chandni
 */

import java.util.Arrays;
import java.util.Scanner;
public class editDistance {

	public int min(int x, int y, int z) {
		return (x<=y)?((x<=z)?x:z):((y<=z)?y:z);
	}

	public int eD(String a, String b, int m, int n) {
		//System.out.println(m+"\t"+n);
		int[][] save = new int[m+1][n+1];
		for(int i=0; i<=m; i++) {
			for(int j=0; j<=n; j++) {
				if(m == 0)
					save[m][n] = n;
				else if(n == 0)
					save[m][n] = m;
				else if(a.charAt(m-1) == b.charAt(n-1)) {
					System.out.println(a.charAt(m-1)+"\t"+b.charAt(n-1)+"\n");
					save[m][n] = eD(a, b, m-1, n-1);
				}
				else
					save[m][n] = 1 + min(save[m][n-1],
										save[m-1][n],
										save[m-1][n-1]);
			}
		}
		
		return save[m][n];
	}

	public static void main(String[] args) throws Exception {
		editDistance editDis = new editDistance();
		Scanner sc = new Scanner(System.in);
		String a = sc.next();
		String b = sc.next();
		//String a = "sunday", b = "saturday";
		int m = a.length();
		int n = b.length();
		
		//Arrays.fill(save, 3);
		int cost = editDis.eD(a, b, m, n);
		System.out.println(cost);

	}
}

/*
public int eDWithoutDP(String a, String b, int m, int n) {
	if(m == 0)
		return n;
	else if(n == 0)
		return m;
	else if(a.charAt(m-1) == b.charAt(n-1)) {
		//System.out.println(a.charAt(m-1)+"\t"+b.charAt(n-1)+"\n");
		return eD(a, b, m-1, n-1);
	}
	else
		return 1 + min(eDWithoutDP(a, b, m, n-1),
				eDWithoutDP(a, b, m-1, n),
				eDWithoutDP(a, b, m-1, n-1));
}
*/
